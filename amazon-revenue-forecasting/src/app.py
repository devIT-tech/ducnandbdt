import streamlit as st
import pandas as pd
import os
import torch
import numpy as np
import matplotlib.pyplot as plt
from model import SalesLSTM

# C·∫•u h√¨nh th∆∞ m·ª•c
DATA_DIR = r"C:\Users\PC\OneDrive\Dokumen\Amazon_sales_forecasting\data\sales_history"
MODEL_DIR = r"C:\Users\PC\OneDrive\Dokumen\Amazon_sales_forecasting\best_models"

# Load m√¥ h√¨nh t·ª´ file
@st.cache_resource
def load_model(asin_id):
    model = SalesLSTM()
    model_path = os.path.join(MODEL_DIR, f"lstm_model_{asin_id}.pt")
    model.load_state_dict(torch.load(model_path, map_location=torch.device("cpu")))
    model.eval()
    return model

# H√†m d·ª± b√°o doanh thu ng√†y ti·∫øp theo
def predict_next_day(model, recent_sales):
    input_seq = torch.tensor(recent_sales[-30:], dtype=torch.float32).unsqueeze(0)
    with torch.no_grad():
        output = model(input_seq).squeeze().item()
    return output

# L·∫•y danh s√°ch file l·ªãch s·ª≠
def get_available_products():
    files = os.listdir(DATA_DIR)
    return [f.replace("_sales_history.csv", "") for f in files if f.endswith("_sales_history.csv")]

# Giao di·ªán Streamlit
st.set_page_config(page_title="Amazon Sales Forecast", layout="wide")

st.title("Amazon Sales Forecasting")
st.markdown("Ch·ªçn m·ªôt m√£ s·∫£n ph·∫©m ƒë·ªÉ xem l·ªãch s·ª≠ doanh thu v√† d·ª± b√°o cho ng√†y ti·∫øp theo.")

available_asins = get_available_products()
asin_id = st.selectbox("üîçCh·ªçn m√£ s·∫£n ph·∫©m (ASIN):", available_asins)

# ƒê·ªçc d·ªØ li·ªáu l·ªãch s·ª≠
csv_path = os.path.join(DATA_DIR, f"{asin_id}_sales_history.csv")
df = pd.read_csv(csv_path, parse_dates=["date"])

# Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m
with st.expander("Th√¥ng tin s·∫£n ph·∫©m"):
    st.write(f"**T√™n s·∫£n ph·∫©m:** {df['title'].iloc[0]}")
    st.write(f"**Gi√°:** {df['price'].iloc[0]}")
    st.write(f"**X·∫øp h·∫°ng trung b√¨nh:** {df['average_rating'].iloc[0]}")
    st.write(f"**T·ªïng s·ªë l∆∞·ª£t ƒë√°nh gi√°:** {df['num_reviews'].iloc[0]}")

# Bi·ªÉu ƒë·ªì l·ªãch s·ª≠ doanh thu
st.subheader(" Doanh thu theo ng√†y")
st.line_chart(df.set_index("date")["daily_revenue"])

# D·ª± b√°o
if len(df) >= 30:
    recent_sales = df["daily_revenue"].values.reshape(-1, 1).astype(np.float32)
    recent_sales = (recent_sales - recent_sales.min()) / (recent_sales.max() - recent_sales.min())  # scale
    recent_sales = [[x[0]] for x in recent_sales]

    try:
        model = load_model(asin_id)
        prediction = predict_next_day(model, recent_sales)
        prediction_scaled = prediction * (df["daily_revenue"].max() - df["daily_revenue"].min()) + df["daily_revenue"].min()
        prediction_scaled = abs(prediction_scaled)
        st.success(f"D·ª± b√°o doanh thu ng√†y ti·∫øp theo: **${prediction_scaled:.2f}**")
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ d·ª± b√°o: {str(e)}")
else:
    st.warning("C·∫ßn √≠t nh·∫•t 30 ng√†y doanh thu ƒë·ªÉ d·ª± b√°o.")

